{"version":3,"sources":["graph.js"],"names":[],"mappings":";;AAAA,CAAC,YAAM;AACL,MAAM,OAAO,GAAG,uBAAuB,CAAC;AACxC,MAAM,aAAa,GAAG,OAAO,CAAC;;AAE9B,MAAI,KAAK,GAAG;AACV,iBAAa,EAAA,yBAAG;AACd,UAAI,QAAQ,GAAG,QAAQ,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;;AAEnD,UAAI,MAAM,GAAG,EAAE,CAAC;;AAEhB,WAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACxC,YAAI,IAAI,GAAG;AACT,YAAE,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE;AAClB,aAAG,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,GAAG;SAClD,CAAC;;AAEF,cAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;OACnB;;AAED,aAAO,MAAM,CAAC;KACf;;AAED,kBAAc,EAAA,wBAAC,IAAI,EAAE;AACnB,aAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,EAAK;AACtC,YAAI,GAAG,GAAG,IAAI,cAAc,EAAE,CAAC;AAC/B,WAAG,CAAC,YAAY,GAAG,MAAM,CAAC;AAC1B,WAAG,CAAC,IAAI,CAAC,KAAK,EAAK,OAAO,SAAI,aAAa,SAAI,IAAI,CAAC,GAAG,CAAG,CAAC;;AAE3D,WAAG,CAAC,MAAM,GAAG,YAAM;AACjB,cAAI,GAAG,CAAC,MAAM,KAAK,GAAG,EAAE;AACtB,mBAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;WACvB,MAAM;AACL,kBAAM,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC;WAC/B;SACF,CAAC;;AAEF,WAAG,CAAC,OAAO,GAAG,YAAM;AAClB,gBAAM,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC;SAChC,CAAC;;AAEF,WAAG,CAAC,IAAI,EAAE,CAAC;OACZ,CAAC,CAAC,IAAI,CAAC,UAAC,QAAQ,EAAK;AACpB,YAAI,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;;AAE/E,eAAO,IAAI,CAAC;OACb,CAAC,CAAC;KACJ;;AAED,kBAAc,EAAA,wBAAC,KAAK,EAAE;AACpB,UAAI,OAAO,GAAG,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;;AAE7C,aAAO,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;KAC7B;GACF,CAAC;;AAGF,QAAM,CAAC,KAAK,GAAG,KAAK,CAAC;CACtB,CAAA,EAAG,CAAC","file":"app.js","sourcesContent":["(() => {\n  const GH_ROOT = 'http://api.github.com';\n  const GIST_ENDPOINT = 'gists';\n\n  let graph = {\n    getSourceUrls() {\n      let figElems = document.querySelectorAll('figure');\n\n      let result = [];\n\n      for (let i = 0; i < figElems.length; i++) {\n        let data = {\n          id: figElems[i].id,\n          src: figElems[i].querySelector('img').dataset.src,\n        };\n\n        result.push(data);\n      }\n\n      return result;\n    },\n\n    getGistContent(item) {\n      return new Promise((resolve, reject) => {\n        let req = new XMLHttpRequest();\n        req.responseType = 'json';\n        req.open('GET', `${GH_ROOT}/${GIST_ENDPOINT}/${item.src}`);\n\n        req.onload = () => {\n          if (req.status === 200) {\n            resolve(req.response);\n          } else {\n            reject(Error(req.statusText));\n          }\n        };\n\n        req.onerror = () => {\n          reject(Error('Network Error'));\n        };\n\n        req.send();\n      }).then((response) => {\n        item.data = JSON.parse(response.files[Object.keys(response.files)[0]].content);\n\n        return item;\n      });\n    },\n\n    getDataFromSrc(input) {\n      let queries = input.map(this.getGistContent);\n\n      return Promise.all(queries);\n    },\n  };\n\n  // Inject the function into the browser global namespace\n  window.graph = graph;\n})();\n"],"sourceRoot":"/source/"}